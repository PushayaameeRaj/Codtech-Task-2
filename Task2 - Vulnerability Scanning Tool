/*code to be executed*/

import socket
import requests

def scan_open_ports(target):
    open_ports = []
    print(f"Scanning {target} for open ports (1-1024)...")
    for port in range(1, 1025):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    if open_ports:
        print(f"Open ports on {target}: {open_ports}")
    else:
        print(f"No open ports found on {target}.")

def check_http_headers(url):
    try:
        response = requests.get(url)
        headers = response.headers
        print(f"\nChecking headers for {url}...")
        if 'Server' in headers:
            print(f"Server: {headers['Server']}")
            if "Apache/2.2" in headers['Server']:
                print("Outdated Apache version detected!")
        if 'X-Powered-By' in headers:
            print(f"X-Powered-By: {headers['X-Powered-By']}")
            if 'PHP/5' in headers['X-Powered-By']:
                print("Outdated PHP version detected!")
    except requests.RequestException as e:
        print(f"Failed to retrieve headers: {e}")

def check_dns(target):
    try:
        ip = socket.gethostbyname(target)
        print(f"{target} resolved to {ip}")
    except socket.gaierror:
        print(f"Failed to resolve {target}")

if __name__ == "__main__":
    # Example target
    target = "scanme.nmap.org"  # You can replace this with a target IP or domain
    
    # 1. Open Port Scanning
    scan_open_ports(target)
    
    # 2. Checking HTTP Headers for outdated versions
    check_http_headers(f"http://{target}")
    
    # 3. Basic DNS Check
    check_dns(target)
